DATA MODEL
-> COLLLECTION OF CONCEPUTAL TOOLS FOR DECRIBING DATA , DATA RELATION
-> WAY TO EXPRESS DATA
-> RELATION BTW ENTITIES, USING CONSTRAINTS.

TYPES:-
1. ER MODEL
2. RELATIONAL MODEL

1. ER MODEL
-> ENTITY - RELATION

=> ENTITY - REAL WORLD OBJECT => DENOTES 'ROW' => ROW MEANS RECORD
-> HIGH LEVEL DATA MODEL BASED ON PERCEPTION OF REAL WORLD 

-> THE MODEL REPRESENTED IN THE FORM OF GRAPHS OR DIAGRAM IS KNOWN AS ER DIAGRAM.

-> ENTITY SET / ENTITY => DENOTES 'TABLE' or REAL WORLD OBJECT
-> ATTRIBUTE => DENOTES 'COLUMN'

------> TYPES OF ATTRIBUTE

=> SINGLE VALUE
-> REPRESENTED BY ELIPES
-> EG:- ID

=> COMPOSITE 
-> REPRESENTED BY ELIPES WITH OUTER ARROWS
-> EG :- NAME which can be further divided into First_name , Middle_name, Last_name
	    ADDRESS => H.no, city, state, country

=> MULTIVALUED ATTRIBUTE
-> REPRESENTED BY 2 ELIPES WITH OUTER ARROWS
-> EG :- CONTACT, PRODUCTS

=> DERIVED ATTRIBUTE
-> TO FIND OUT SOME VALUE WITH THE HELP OF ANOTHER ATTRIBUTE
-> EG :- AGE(We can find out the value of age with dob), STATE(we can find country or state) 
-> REPRESENTED BY DOTTED ELLIPES

-------->> RELATION 
-> REPRESENTED BY DIAMOND
-> RELATION CONTAIN 'has'

----------------------------------------------------------------------------------------------

RELATION :- IF ENTITY OF ONE TABLE MATCHES WITH ENTITY OF ANOTHER TABLE THEN RELATION IS 
		    ESTABLISHED


STUDENT TABLE HAS RELATION WITH SUBJECTS , TEACHERS (ONE SIDEDðŸ¤£) 
		 => REPRESENTED BY STUDENT -- DIAMOND -- TEACHER/SUBJECT/COURSE
 
TYPES OF RELATIONS 
1. STRONG
2. WEAK

1. STRONG RELATION :- 

EG:- CUSTOMER BORROW LOAN FROM BANK , THEN RELATION ESTABLIED IS BORROW
	CUSTOMER TABLE -- DIAMOND(BORROW) -- LOAN TABLE
-> THUS IT IS A STRONG ENTITY AS LOAN IS THEIR OR NOT CUSTOMER IS NOT AFFECTED

2. WEAK RELATION :-
-> REPRESENTED BY CONCENTRIC BLOCKS .

---------------------------------------------------------------------------------------------------

# DEGREE OR RELATION :-
1. UNARY RELATION :- SINGLE TABLE CONTAINING ALL RELATIONS IS KNOWN AS UNARY RELATION
TABLE
E_id E_Name	Manager_id
1. 	RAJ	  	2
2.	AKASH  	3
3.	ABHISHEK	NULL

2. BINARY RELATION :- TWO TABLE CONTAINING RELATIONS IS KNOWN AS BINARY RELATION

3. TERTIARY OR TERNARY RELATIONS :- CONTAIN 3 TABLE WITH RELATION (JOB PROFILE)

EG :- JOB -- DIAMOND(WORK)(IS A ) -- DEPARTMENT 
			 			|
			 			|
		   			EMPLOYEE

4. n-Arry :- n NO OF TABLE RELATION IS KNOW AS N-ARY

-----------------------------------------------------------------------------------------------------------

# RELATIONSHIP CONSTRAINTS:- 

1. MAPPING CARDIANALITY :- 
a. ONE TO ONE 	-> EMPLOYEE TABLE -- RELATION -- TASK (EACH EMPLOYEE GET ONLY SINGLE TASK AT A TIME )
		    	-> EACH ENTITY MATCHES WITH ONLY ONE ENTITY 
		    	-> TRIAL EMPLOYEE -> HAVING ONE SYSTEM ONLY
		    	-> BANK WILL HAVE ONE CUSTOMER WITH ONE ACCOUNT ON ONE PHONE NUMBER

b. ONE TO MANY 	->

c. MANY TO MANY	-> EK BOOK MULTIPLE AUTHOR BUT MANY BOOKS ONE AUTHOR
				-> AN INSTRUCTOR CAN TEACHES MANY COURSES AND STUDENT WILL ALSO UNDERSTAND 

2. PARTICIPANT CONSTRAINTS :- 
b. PARTIAL PARTICIPANT 	:- 
a. TOTAL PARTICIPANT	:- CUSTOMER -- DIAMOND(BORROW) --- LOAN (WEAK RELATIONS)
						 |					  |
						 |					  |
					|TOTAL PARTICIPANTS|					  |
											TOTAL PARTICIPANTS
-> LOAN TABLE IS FULLY USED 
  
-------------------------------------------------------------------------------------------------------
DIAGRAMS :-

-------------------------------------------------------------------------------------------------------
ER DIAGRAM SPECIAL FEATURES:-

1. SPECIALIZATION :-
LET SUPPOSE WE HAVE A PERSON TABLE HAVING id, name AND ANOTHER TABLE OF CUSTOMER(c_id and p_name) 
AND EMPLOYEE TABLE (e_id and p_name) having salary and job columns also

-> SO TO PUT ALL ATTRIBUTES IN A SINGLE TABLE IS NOT A GOOD IDEA AS THEIR EXIST DISTINCTIVE ATTIBUTES WHICH 
DOESNOT REQUIRE FOR ALL OTHERS .

-> IT IS A TOP TO BOTTOM APPROACH / RELATION IN WHICH WE SPECIALIZE ALL ENTITIES OR ATTRIBUTES.

-> IN PLACE OF THE WE MAKE ANOTHER TABLE 
		Job_id,Job, Salary--|EMPLOYEE|--DIAMOND(IS A )--|PERSON| -- P_id, P_Name

2. GENRALIZATION 
--> AT CONCEPTUAL OR LOGICAL LEVEL , GENRALIZATION IS EQUAL TO SPECIALIZATION
--> THIS SUPPORT BOTTOM TO TOP APPROACH 
--> IT IS ALSO A RELATION
--> INSTAGRAM AND SNAPCHAT HAVING SOME FEATURES IN COMMON FOR THAT WE CAN CREATE ANOTHER TABLE SUCH AS 
SOCIAL MEDIA WHICH COVER BOTH THE COMMON ATTRIBUTES. THIS METHOD IS DONE BY THE PROCESS OF INHERITANCE.
THIS PROCESS IS KNOWN AS GENRALIZATION.

3. AGGREGATION :-
EG :- Manager <--JOB -- DIAMOND(WORK)(IS A ) -- DEPARTMENT --> Manager
			 						|
			 						|
		   				 EMPLOYEE --> Manager

-> FOR THIS , WE WILL CREATE A COMMON TABLE AND STORE MANAGER DATA TO CONTROL REDUNDENCY OR DATA DUPLICASY.

-------------------------------------------------------------------------------------------------------------

HOW TO THINK ER DIAGRAM OF ANY DATABASE AND FORMULATE IT.

--------------------------------------------------------------------------------------------------------

RELATIONAL MODEL:-
-> WHEN ER MODEL CONVERTED INTO TABULAR FORM THIS IS KNOWN AS RELATIONAL MODEL.

							ADD<-- CUSTOMER --> C_name
									|	  |		|
									|	  |		|
									V	  V		V
								  DOB  EMAIL Id;

RELATIONAL DATABASE MANAGEMENT SYSTEM
-> IT IS A SOFWARE 
-> MYSQL, ORACLE, DBSUN

-> MYSQL IS A RDBMS SOFTWARE WHICH IMPLEMENTS THE PROGRAMMING LAUNGUAGE SQL.

--------------------------------------------------------------------------------------------------------

# KEYS IN MYSQL

1. SUPER KEY -> ANY PEMUTATION OR COMBINATION OF ATTRIBUTE WHICH CAN UNIQUELY DEFINE TUPPLE(ENTIRE ROW).
EG:- customer(id,name,contact,email,address, username)
=> SUPERKEYS :- (id , name and address), (email,name,contact) , (id,email,contact)
=> NAME,ADDRESS is not a superkey as it cant uniquely define

2. CANDIDATE KET -> A SUBPART OF SUPERKEY WHICH CAN UNIQUELY DEFINE TUPPLE WITHOUT REDUNDENCY
-> IT WILL ALWAYS BE NOT NULL
-> CANDIDATEKEY -> (id,email),(email,username)

3. PRIMARY KEY -> SELECTED OUT OF CANDIDATE KEY
-> THEIR IS ONLY 1 PRIMARY KEY IN A TABLE
-> EG:- id

4. ALTERNATE KEY -> ALL CANDIDATE KEY EXCEPT PRIMARY KEY
-> EG:- email

5. FOREIGN KEY -> IT CREATES A RELATION BTW 2 TABLES.
-> SUPPOSE 2 TABLES CUSTOMERS AND PRODUCTS
-> CUSTOMER -> c_id, C_name, contact
=> PRODUCTS -> p_id, p_name, c_id

-> FOREIGN KEY :- c_id for product table is foreign key for customer table as Primary key

6. COMPOSITE KEY ;- PRIMARY KEY FALL FOR 2 ATTRIBUTES

7. COMPOUND KEY :- PRIMARY KEY FALL FOR 2 COMPOUND KEY

8. SURROGATE KEY :- SYNTHETIC PRIMARY KEY GENERATED BY DATABASE
EG :- TWO TABLES SCHOOL A and SCHOOL B
		SCHOOL A -> id(1,2,3,...), name and class
		SCHOOL B -> id(101,102,103,...), name and class
		TO JOIN AS COMMON TABLE SCHOOL-> CREATE PK AND FK RESP => DATA BECOMES INCONSISTENT 
	-> BOTH HAVING DATA SAME BUT FORMAT UNIQUE => CREATE SURROGATE KEY BY DATABASE

----------------------------------------------------------------------------------------------------

# SOLIDITY :- 