// DB OPTIMIZATION TECHNIQUES:-

1. NORMALIZATIO
2. TRANSACTIONS
3. INDEXING
4. CLUSTURING
5. PARTIONING

#OPTIMIZATION -> TO INCEASE USER HANDLING AND REDUCE RESPONCE TIME. 

#PROBLEMS
--> A VERY LARGE DB WHERE MILLONS/BILLONS OF DATA IS 
STORED , AS A RESULT MULTIPLE REQ OCCURS AT A SAME
TIME LEADING TRAFFIC IN WEBSITE WHICH LEADS IN INCREASE
IN RESPONCE TIME

#SOLUTION

--------------------------------------------------------------

1. CLUSTURING/REPLICATION(COPY) :- THE PROCESS OF REPLICATING THE DATA OF DB (ACC TO THE LOCATION AND NEED) AS A
RESULTS MULTIPLE SERVERS ARE ESTABLISHED WITH A CENTRALIZED DATABASE

-> PROBLEM BEFORE CLUSTURING :- NOW REDUNDENCY IS OBTAIN -> RESPONCE TIME INCREASES -> CAN BE CORRUPT 
-> SOLUTION AFTER CLUSTURING :- NOW COPY OF DB IS CAPABLE AND DOENT NEED CENTRALIZED DATABASE 

#CLUSTURING :- THE ENVIRONMENT IN WHICH THESE MULTIPLE SERVERS
ARE CONTINUOULSY WORKING WITH A GOOD RESPONCE TIME WRT THE 
COPY DATA OF DB IS KNOWN AS CLUSTURING

*#LOAD BALANCER -> TOOLS RESPONSIBLE FOR MAINTAIN BALANCE BTW
THE SERVERS WHEN SOME ERROR OCCURED OR SERVER CRASHED.

----------------------------------------------------------------------------------------------------------------

#PARTIONING:- IN THIS , WE CREATE PARTIONS SUCH THAT DATABASE
IS EQUALY DIVIDED INTO PARTS THUS CREATING MULTI SERVERS

-> USED IN ONLINE DB's i.e., NOSQL TYPE DATABASES used more

ADV :- RESPONCE TIME GET LOW 

TYPES:-
1. HORIZONTAL PARTIONING
2. VERTICAL PARTIONING

1. HORIZONTAL PARTIONING / SHARDING:-

-> TABLE OR DB IS DIVIDED HORIZONTALLY INTO 2 PARTS AS A RESULT 2 TABLES OR DB's ARE FORMS BUT SERVER IS UNKNOWN ABOUT THAT CHANGE

-> FOR THAT THEIR IS ROUTING LAYER , WHICH SETS THE SERVER 
WHERE THE SERVER's REQ IS BEING FORWARDED .

*-> PHYSICAL SPACE INCREASE WHICH DOENST MATTER AS RESPONCE
ENGAGEMENT REMAINS SAME (IT MIGHT BE USEFUL FOR SMALL DB).

-> MORE USED AS FULL TUPPLE OBTAINS.

# PROBLEM :- 1. MATHEMATICAL(ANALYTICAL) OPERATION IS COMPLEX(i.e., ACCESSING BOTH DATABASES).
2. DEVELOPER HACTIC TO MANAGE REQUEST (APPLICATION STORAGE INCREASES)

2. VERTICAL PARTIONING :-

-> TABLE OR DB IS DIVIDED HORIZONTALLY INTO 2 PARTS AS A RESULT 2 TABLES OR DB's ARE FORMS 

# PROBLEM :- COLOUMN DEFINING , RELIZATION(ACCESS BOTH THE TABLE) IS COMPLEX , DEVELOPER HACTIC.

-> AS MANY PROBLEMS ARE OCCURED , LESS USED 
