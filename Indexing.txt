INDEXING :- 
SORT IN THE ORDER 

-> BINARY SEARCH HAS TO BE SORTED.

-> THUS INDEX TABLE (VIRTUAL MEMORY) IS CREATED IN WHICH A BLOCK OR A BASE OR A FRAGMENT IS 
	CREATED IN WHICH A BASE POINT (IS CREATED) BY WHICH A SET OF BLOCK IS GIVING A BASE POINTER 
	WHICH REDUCES THE COMPLEXITY OF SEARCH .

-> THE COMPLEXITY CAN BE REDUCED WITH THE HELP OF INDEX KEY WHICH IS ORDERED THUS WE CAN EASILY
	APPLY BINARY SEARCH


TYPES :-

1. DENCE INDEX(ALL RECORD) :- THIS CONTAIN INDEX WHICH RECORDS FOR EVERY SEARCH KEY VALUE IN THE 
									DATA FILE
-> "UNSORTED" DATA
-> EG:- SARE 1 ke liye 1 -> BP1 => SIMILARLY => SARE 2 k liye 2 -> BP2 , ....

2. SPARSE INDEX(NORMAL INTERVAL INDEXING) :- AN INDEX RECORD APPERS FOR ONLY SOME OF THE SEARCH-KEY

-> EG :- PRIME ATTRIBBUTE AS NON REPEATING SO 1->1-> BP1 => 2->2->BP2

3. PRIMARY INDEX (CLUSTURING INDEX):- WHEN DATA OR FILE "SORTED" BY ANY KEY OR ATTRIBUTE
	-> BASED ON KEY ATTRIBUTE
		-> SORTED AND PRIME ATTRIBUTE(PRIMARY KEY) IN NATURE ,i.e, FOLLOW SPARSE INDEX
	-> BASED ON KEY ATTRIBUTE
		-> FOLLOW DENCE INDEX 
	-> MULTILEVEL INDEXING
		-> (PRIMARY AND SECONDARY INDEX) TWO OR MORE INDEXING TABLE
		-> (Eg:-) PRIMARY TABLE , INDEX TABLE, INDEX TABLE 2 , Etc
		-> JUST COMPRESSING THE MAIN TABLE INTO ITS COMPRESSED FORM ACCORDING TO THE REQUIREMENT OF THE
			DB.
		-> TO RECOVER THE DATA , THE DATA IS COMING BACK FROM THE BACK TO FRONT APPROACH.

4. SECONDARY INDEX (NON-CLUSTURING INDEX) :- 
-> OPP OF PRIMARY INDEXING
-> SOME DATA IS "UNSORTED"
-> EG OF DENSE INDEXING


-------------------------------------------------------------------------------------------------------

# LINKLIST

-> DISCONTIGOUS :=

-> IF DATA IS UNSORTED AS WELL AS DUPLICATE THEN EACH BASE POINT(IS CREATED DIFFERENTLY)

-> THUS ALL THE DUPLICATED DATA ARE LINKED WITH EACH OTHER BY BP1 -> BP3 , etc