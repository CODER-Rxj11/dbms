DBMS 

# DATA -> RAW FACTS OR FIGURES
	  -> RAW MATERIALS IN THE FORM OF BITS AND BYTES.

# INFORMATION -> PROCESSED DATA 
		    -> CONTAINES USEFUL INFORMATION.

# DATA -> PROCESSED -> INFORMATION -> DECISION

// LEXICOGRAPHYCALLY -> CHARACTER BY CHARACTER SERCH FOR DATA

-> CLIENT (FRONTEND) <---> Client Server Relationship <---> SERVER(BACKEND) ===> DATABASE (MYSQL)

// THERE CAN BE MULTIPLE FRONTEND(VIEWS) BUT A SINGLE BACKEND(SERVER) AND DATABASE (MYSQL)
// THE PAKAGE USED TO TRANSFER THE DATA FROM FRONTEND TO BACKEND IS JSON(KEY-VALUE PAIRS), XML(EARLIER USED)

// WEB - html,css,js,php
// ANDROID - android+java, flutter, dart

//SERVER -> JAVA - SPRING, PYTHON - DJANGO, JS - NOJE.JS & EXPRESS, PHP - LARAME, RUBY - ROR

//DB 
==> SQL -> MQSQL, ORACLE, POST GRACE, MARIA , ETC. 

WHY MYSQL FOR DB :-

-> BEIGINEER FRIENDLY, 60-65% COVER MARKET, FREE AT LOCAL LEVEL


//CLOUD => UNIVERSALLY DATA STORE AND CAN BE ACCESSED THOUGHOUT ANY MEDIUM 

-> MACHINES NOT CAPABLE FOR
==> TO RUN 24*7
==> MANAGEMENT , SCALING , DEPLOYMENT IS NOT POSSIBLE

=> VENDORS
==> AWS , HEROKU,ETC

//DBMS -> DATABASE MANAGEMENT SYSTEM
//RDBMS -> RELATIONAL DATABASE MANAGEMENT SYSTEM (FILE SYSTEM)
-> ALL THE DATABASE ARE CONNECTED WITH THE HELP OF UNIQUE VALUE(PRIMARY KEY) THROUGHOUT THE TABLE.

EG :- S.No => FOREIGN KEY AND SCHOLAR NO. => PRIMARY KEY

//////////////////////////////////////////////////////////////////////////////////////////////////

//ABSTRACTION :- NESSARY CHIZ DIKHAO BAKI CHOD DO!!

EG:= IN A COMPANY'S DATABASE THEIR ARE FOLLOWING DEPARTMENTS :- FINANCE, SELLS, CUSTOMER, LOGICTIC
=> So we have to use abstraction view which seperate particular data for particular department

TYPES OF VIEW IN ABSTRACTION:-
1. INTERNAL VIEW/PHYSCIAL VIEW 
2. EXTERNAL VIEW/
3.	LOGICAL VIEW/CONCEPTUAL VIEW(#IMP FOR DBMS ADMINISTRATOR OR DEVELOPER)

#  INTERNAL VIEW/PHYCIAL VIEW :
-> DATA STORE AT MEMORY LEVEL

=> PHYSICAL SCHEMA -> DESIGN OF PHYCIAL VIEW

#	LOGICAL VIEW/CONCEPTUAL VIEW :
-> THE TABLE CREATED BY DEVELOPER/ADMINISTRATOR IS LOGICAL VIEW

=> LOGICAL SCHEMA -> DESIGN OF LOGICAL VIEW.

#	EXTERNAL VIEW :
->	LOGICAL VIEW/SCHEMA/DATABASE SE JO DATA HATH JATA H WO EXTERNAL DATA HOTA H.
-> PREMOUM CUSTOMER DATA HIDE BY JUNIORS/ASSISTANT/ANYOTHERS WE USE ABSTRACTION

# INSTANCE :- RELATED DATA , PART, {OBJECT}, EK TIME PE DATABASE ME KYA KYA STORE HAI.
EG :- WE HAVE A SCHOOL DATABASE WHICH HAS FOLLOWING PARTS/JARGANS(PART) : STUDENT , ACCOUNT
		, STAFF, TEACHER .
	-> THEN STAFF/TEACHERS/STUDENTS/ACCOUNTS IS AN INSTANCE OF DATABASE SCHOOL.

# SCHEMA :- DESIGN OF TABLE

# SUBSCHEMA :- DATABASE (AMAZON) => PARTS => FINANCE , SELLS, LOGICTIC ==> SCHEMA => SUBSCHEMA

#DATA MODEL - PROVIDES A WAY TO DESCRIBE THE DESIGN OF A DB AT A LOGICAL LEVEL(IN SHORT APPROACH)

=> SOME OF DATA MODELS ARE :{
-> ENTITY RELATION MODEL 
-> RELATIONAL MODEL 
-> OBJECT-ORIENTED RELATION MODEL

(INTERVIEW)//DATABASE LAUNGUAGE :- WE NEED LAUNGUAGE TO INTERACT BETWEEN LOGICAL LEVEL AND PHYSICAL LEVEL

1. DATA DEFINATION LAUNGUAGE (DDL) :- TO DEFINE DATA
// COMMANDS :- CREATE, DROP(RESTRICTION LAGA DO POORI TARIKE SE MAT HATAO), 
	ALTER(TO CHANGE THE STRUCTURE), TRUNCATE(EMPTY THE TABLE)
-> ALSO DEFINE  CONSISTENCY
-> ALSO HAVE SOME CONSTRAINTS (LIMITATIONS)

2. DATA MANIPULATION/MODIFICATION LAUNGUAGE :- 
-> COMMANDS :- INSERT, UPDATE, DELETE(HATADO), LOCK

3. DATA QUERY LAUGUAGE :- 
-> COMMANDS :- SELECT

4. DATA CONTROL LAUNGUAGE :- 
-> COMMANDS :- GRANT, REVOKE

5. TRANSACTION CONTROL LAUGUAGE :- 
-> COMMANDS :- SELECT

HERE COMES THE LEGEND ======== STRUCTURED QUERY LAUNGUAGE ============ 
-> SQL CAN PERFORM ALL THE ABOVE INSTRUCTION/COMMANDS.

// DBMS ARCHITECHTURE

-> FOLLOWING TIERS OF ARCHITECTURE 
1. 1 TIER ARCHITECTURE
	=> ALL IN ONE PLACE i.e., CLIENT + SERVER + DATABSE
	=> EG:- MS-OFFICE
	-> DISADVANTAGES
	=> NO LOGIN OR REGISTER
	=> ERROR HANDLING PROB
	=> CORRUPTION MORE
	=> EVERY SYSTEM HAS ITS UNIQUE CLIENT , SERVER AND DATABASE NO CONNECTIVITY
2. 2 TIER ARCHITECTURE
	=> 2 PART :- CLIENT AND DATABASE
	=> EG:- ODBC (PYTHON + DATABASE) , JDBC(JAVA + DATABASE)
	-> DISADVANTAGES
	=> NO LOGICAL LAYER TO VALIDATE
	=> DATA SECURITY LESS
	=> DATA SCALABILITY
3. 3 TIER ARCHITECTURE
	=> CLIENT < - > APPLICATION (SERVER) =>  <- DATABASE

TIER VS 3 TIER 
-> SCALABILITY 
-> 
